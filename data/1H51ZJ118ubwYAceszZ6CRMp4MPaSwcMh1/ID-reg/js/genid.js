// Generated by CoffeeScript 1.10.0
(function() {
  var GenID,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  GenID = (function(superClass) {
    extend(GenID, superClass);

    function GenID() {
      this.createCert = bind(this.createCert, this);
      this.onOpenWebsocket = bind(this.onOpenWebsocket, this);
      return GenID.__super__.constructor.apply(this, arguments);
    }

    GenID.prototype.init = function() {
      this.last_checked = 0;
      this.site_info = null;
      this.genid = bitcoin.ECPair.fromWIF(genkey);
      return this.genid;
    };

    GenID.prototype.onOpenWebsocket = function(e) {
      this.cmd("siteInfo", {}, (function(_this) {
        return function(site_info) {
          _this.site_info = site_info;
          if (_this.site_info.cert_user_id) {
            document.getElementById("id_show").innerHTML = "Welcome, "+_this.site_info.cert_user_id.replace(/@.+/,"")+"!<br><br>";
            return document.getElementById("submit_button").innerHTML = "Change ID";
          }
        };
      })(this));
    };


    GenID.prototype.route = function(cmd, message) {
      var btn;
      if (cmd === "setSiteInfo") {
        this.site_info = message.params;
        btn = document.getElementById("submit_button");
        if (this.site_info.cert_user_id) {
          btn.textContent = "Change ID";
          document.getElementById("id_show").innerHTML = "Welcome, "+this.site_info.cert_user_id.replace(/@.+/,"")+"!<br><br>";
        } else {
          btn.textContent = "Create ID";
          document.getElementById("id_show").innerHTML = "";
        }
      }
    };

    GenID.prototype.createCert = function() {
      var cert;
      var name = document.getElementById("name_input").value.toLowerCase();
      if (name === "") {
            name = this.site_info.auth_address.slice(0, 13);
      }
      cert = bitcoin.message.sign(this.genid, (this.site_info.auth_address + "#web/") + name).toString("base64");
      return this.cmd("certAdd", [certname, "web", name, cert], (function(_this) {
        return function(res) {
          if (res.error && res.error.startsWith("You already")) {
            return _this.cmd("certSelect", [[certname]]);
          } else if (res.error) {
            return _this.cmd("wrapperNotification", ["error", "Failed to create account: " + res.error]);
          } else {
            return _this.cmd("certSelect", [[certname]]);
          }
        };
      })(this));
    };

    return GenID;

  })(ZeroFrame);

  window.Page = new GenID();

}).call(this);
