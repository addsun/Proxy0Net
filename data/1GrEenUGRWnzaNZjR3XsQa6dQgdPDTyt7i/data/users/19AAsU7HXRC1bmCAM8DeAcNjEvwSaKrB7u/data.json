{
	"next_post_id": 11,
	"next_comment_id": 4,
	"next_follow_id": 1,
	"avatar": "generate",
	"user_name": "ThinkProgram",
	"hub": "1GrEenUGRWnzaNZjR3XsQa6dQgdPDTyt7i",
	"intro": "Random ZeroNet user",
	"post": [
		{
			"post_id": 1476355269,
			"body": ".",
			"date_added": 1476355267
		},
		{
			"post_id": 1476364522,
			"body": "春节前承诺的事情，今天兑现了，赶在二月份结束前——还好今年是闰年 :)\n　　简而言之，俺把这几年整理的《太子党关系网络》的原始数据开放到 GitHub 上，以便今后进行多人协作。\n　　顺便说一下：赶在二月底之前完成此事还有一个重大意义——马上要开两会了，这是俺为“两会”提供的献礼 :)\nhttps://github.com/programthink/zhao",
			"date_added": 1476364519
		},
		{
			"post_id": 1476364618,
			"body": "热烈庆贺“太子党关系网络”开源项目率先获得朝廷认证!!!!!!!\nhttps://github.com/programthink/zhao",
			"date_added": 1476364614
		},
		{
			"post_id": 1476364701,
			"body": "[博客评论区升级——根据【热度】给楼层排序，以及几个易用性改善](https://program-think.blogspot.com/2016/10/custom-blogger-comment.html)",
			"date_added": 1476364696
		},
		{
			"post_id": 1476364730,
			"body": "博客打包下载（用于离线浏览）\nBTSync 同步密钥：（使用说明）\nB7P64IMWOCXWEYOXIMBX6HN5MHEULFS4V ",
			"date_added": 1476364724
		},
		{
			"post_id": 1476364921,
			"body": " “对抗专制、捍卫自由”的 N 种技术力量\n★引子\n\n　　如果你关注翻墙动态，应该听说了如下坏消息：\nShadowsocks 的作者 Clowwindy，因为受到朝廷方面的胁迫，不得不删除其在 GitHub 上的开源翻墙项目；另外，几乎在同一时间，GoAgent 的作者也删除了其在 GitHub 上的翻墙项目（有可能也是受到朝廷的威胁）。\n　　昨天（8月30日）俺看到新闻——连大名鼎鼎的电子前哨基金会（EFF）都发表文章（链接在“这里”），谴责天朝政府的这种卑劣行径。\n　　连 EFF 都发声了，如果俺不写点啥，好像说不过去啊。所以，今天就这个话题，作一些引申——聊聊【在互联网时代，该如何利用技术手段来捍卫自由】。\n\n　　本文提到了【4种】技术，为啥标题写的是“N 种”？因为将来可能会继续补充其它的技术，为了避免将来“改标题”的麻烦，俺偷懒一下，直接写成“N种”。\n\n★名词解释\n\n　　以俺通常的习惯，先做一下名称解释，以避免误解。\n\n◇自由\n\n　　“自由”一词，在政治学领域已经泛滥了，所以先澄清一下：\n本文所说的“自由”，主要偏重于和“人权”及“民权”相关的自由——比如：思想的自由、言论的自由、支配私有财产的自由、使用网络的自由......\n　　顺便跑题一下：\n　　每当俺提到“自由”，就有人跳出来说“没有绝对的自由”；每当俺提到“民主”，就有人跳出来说“民主不是万能的”......\n　　大伙儿请注意，上述这类反驳，都属于“稻草人谬误”。关于此等伎俩，可参见前几年的博文《扫盲逻辑谬误——以五毛言论为反面教材》。\n\n◇专制\n\n　　本文所说“专制”，既包括【政府】的专制行为，也包括【商业公司】的专制行为。\n比如：咱们朝廷搞的 GFW，就是典型的专制；\n比如：美国政府的棱镜项目（大规模监控），也是专制；\n比如：当年狗咬狗的“3Q大战”到了高潮的时候，疼逊公司发布公告说——安装了360的某工具，就不允许再用 QQ。这种行为也属于专制。\n（类似的例子还能举出很多很多）\n\n★为啥俺要强调“技术力量”？\n\n　　因为咱们正处于“信息时代”，“信息技术”已经渗透到每一个人的生活中。你在生活中的每一个角落，几乎都可以找到“信息技术”的影子。\n　　在这样的时代背景下，专制的势力（政府、商业公司）必定会利用信息技术来强化对个人的奴役；反之，个人也可以利用信息技术来捍卫自由，反抗奴役。\n　　文学名著《双城记》的开场白是这样说的：\n\n    这是最好的时代，也是最坏的时代；\n    这是智慧的年代，也是愚蠢的年代；\n    这是信仰的时期，也是怀疑的时期；\n    这是光明的季节，也是黑暗的季节；\n    这是希望的春天，也是失望的冬天；\n    大伙儿面前应有尽有，大伙儿面前一无所有；\n    大伙儿正在直登天堂；大伙儿正在直落地狱。\n\n　　如果捍卫自由的力量占上风，这就是最好的时代；反之，如果专制势力占上风，这就是最坏的时代。不妨想想《1984》，然后扪心自问一下：你愿意自己的子孙后代生活在那种环境中吗？\n\n★技术力量之“翻墙术”\n\n　　因为本文的“引子”提到了：天朝政府胁迫翻墙软件的作者。所以，咱们就从“翻墙术”开始说起。\n\n◇“翻墙术”的重要意义\n\n　　“翻墙术”最主要的意义在于——确保你具有“使用互联网的自由”。（为了打字省力，以下简称为“上网的自由”）\n　　在互联网时代，有非常多其它的自由，需要依赖“上网的自由”。所以，“上网的自由”很重要；所以，“翻墙术”同样很重要。\n\n　　举例1：\n　　如果你不懂得翻墙，就只能使用墙内的社交网络（微信、新浪微博、人人网......）。而这些墙内的社交网络，存在很严重的言论审查。这种环境下，“言论自由”无从谈起。\n　　而且，在这种环境中待的时间长了，你会形成“自我审查”的坏习惯。由于【语言和思维具有密切的关联性】，当你经常进行语言上的“自我审查”，不知不觉地，你就会在潜意识里面对自己的思想进行自我审查——这就是传说中的——基于“语言改造”的洗脑（效果很彻底）。\n\n　　举例2：\n　　如果你无法翻墙，就只能看天朝的新闻（这些新闻都是被真理部严格审查的）。于是，你的信息来源就非常单一。在这种单一的信息来源之下，你很容易被误导、被洗脑。\n　　反之，如果你学会翻墙，就可以去看墙外网站的新闻。墙外网站的新闻，未必都是可靠的，但至少提供了多种信息来源。因此，你就可以从【多重视角】去看待同一个新闻。如果你具备批判性思维的能力，就可以从多重视角进行分析，然后自己进行取舍。\n\n　　从上面这几个例子可以看出——“上网的自由”是多么的重要。\n\n◇你可以做些啥？\n\n　　1. 自己学会翻墙术；\n　　2. 翻墙去使用那些【没有审查（或审查更少）】的互联网服务；\n　　3. （小范围地）帮助你身边的家人、朋友、同事掌握翻墙术；\n　　4. 有条件的话，大范围地传播翻墙术（关于这条，需要结合下面提到的“匿名术”）\n　　5. 有条件的话，参与翻墙工具的开发（关于这条，需要结合下面提到的“匿名术”）\n\n★技术力量之“匿名术”\n\n　　俺对“匿名术”是非常重视滴——在开博客的第二年（2010），就开始普及匿名术。当时写了一个系列叫做《如何隐藏你的踪迹，避免跨省追捕》。\n\n◇“匿名术”的用途\n\n　　前面提到：“翻墙术”对于“网上言论自由”的重要性。但是请记住：“翻墙术”只是达成言论自由的“必要条件”，而不是“充分条件”。\n　　举个例子：\n　　虽然你可以翻墙到 Twitter 或 G+ 上发表反党言论，Twitter 和 G+ 不会删除你的这些政治言论。但是，朝廷的六扇门可以定位你的身份，然后把你抓起来（俗称“跨省追捕”）。\n\n　　从上述例子可以看出：要想获得互联网上的言论自由，除了要有“翻墙术”，还要有“匿名术”——“翻墙术”确保你能够把言论发表到【不受审查】的墙外网站；“匿名术”确保你可以躲过朝廷的跨省追捕。当你同时具备了这两者，朝廷对你就奈何不得 :)\n\n　　俺本人就是一个活生生的例子：\n　　首先，俺是在 Google 的 Blogspot 平台上搭建博客。Google 的骨气还不错——至少不会屈服于天朝的政治审查。所以，朝廷无法删除俺在 Blogspot 上的博文；\n　　其次，俺很小心地保持匿名，所以朝廷定位不到俺的身份，也就无法进行跨省追捕。\n　　于是，俺就可以在长达6年多的时间里，不断地抹黑咱们的党国，不断地揭露权贵的嘴脸。并且读者还越来越多，而朝廷方面却只能干瞪眼 :)\n\n◇“匿名术”的意义\n\n　　“匿名术”最主要的意义在于——当“个人”需要对抗“政府”的时候，“匿名术”是重要的保护措施。\n　　以咱们天朝为例：\n　　如果你以【公开身份】跟朝廷对抗，朝廷可以采用各种方式来搞你：\n先吓唬你（请喝茶）\n把你的搞得精疲力竭（比如三天两头骚扰你的家人），\n把你搞臭（比如“被嫖娼”）\n捏造一个“莫须有”的罪名把你抓起来（比如“诬陷浦志强律师”）\n　　（面对上述这些，有多少人能抗争到底？恐怕是极少数）\n\n　　幸好咱们身处信息时代，这时候，个人可以采用“匿名术”来对抗政府。由于朝廷无法知道你的身份，前面提到的那些下三滥的招数，全都派不上用场。\n　　俺再强调一下：大伙儿千万不可低估“匿名术”的重要作用和意义。\n\n◇“匿名术”的几个不同的层面\n\n　　很多读者对“匿名术”的理解过于狭隘了。他们以为：只要隐藏了“公网IP”就可以做到匿名。其实捏，“隐藏公网IP”只是确保匿名的“必要条件”，而【不是】“充分条件”。\n　　“隐藏公网IP”只是在“网络层面”进行防范。除了“网络层面”，【至少】还有如下几个层面需要留意：\n操作系统层面（此处所说的“操作系统”，既包括PC，也包括移动设备）\n个人软件层面（此处所说的“个人软件”，既包括PC，也包括移动设备）\n通讯工具层面（比如电话、短信、传真）\n社会工程学层面（没听说过这玩意儿的同学，请看《社会工程学扫盲》）\n　　对于特殊的“高危人群”，还需要考虑“物理层面”的防范（通俗地说，就是“物理安全”）。\n\n　　在俺的系列博文《如何隐藏你的踪迹，避免跨省追捕》中，目前已经涵盖了“操作系统”、“个人软件”、“网络”、“通讯工具”这几个层面。后续部分俺会介绍“社会工程学”层面的防范。\n\n◇你可以做些啥？\n\n　　1. 自己学会匿名术；\n　　2. 依靠匿名术保护自己的隐私；\n　　3. （小范围地）帮助你身边的家人、朋友、同事掌握匿名术；\n　　4. 有条件的话，大范围地传播匿名术（显然，这要在“匿名”的状态下去做）。\n\n★技术力量之“分布式”\n\n　　“分布式”还可以有另外的称呼——比如“去中心化”或“无中心化”。\n\n◇“分布式”的用途\n\n　　刚才提到了“匿名术”，咱们先来看看“分布式”在“匿名术”中的应用。\n　　如今最有名的网络匿名化工具，大概就是 TOR 和 I2P 了（如果你经常俺的翻墙教程，肯定听说过这俩）。这俩款工具，都是采用了“分布式”技术。实际上，俺敢打保票——今后如果有其他人要搞新款的网络匿名化工具，依然会采用“分布式技术”。因为“分布式”可以大大增加追踪者进行“逆向追溯”的难度。\n　　除了用于“网络匿名化”，分布式【至少】还有如下用途：\n　　翻墙术\n　　比如大名鼎鼎 VPN gate 就采用了分布式技术。\n　　传统的 VPN，只要用的人多了，就会引起 GFW 的关注，于是就难逃厄运。反观 VPN gate，用户数非常多（中国的用户数，在全球各国的排名，长年处于前三位），却一直活到现在。\n　　为啥 GFW 无法彻底封杀它？其中一个重要的原因就是“分布式”。\n　　文件共享\n　　比如俺从2015年开始采用 BT Sync 来分享电子书，其效果类似于一个【无容量限制，无流量限制，无审查】的超级网盘。\n　　而且这个超级网盘不依赖任何大公司的服务器；只要参与的节点够多（成百上千）任何政府都无法彻底摧毁它。\n　　社交网络 和 聊天工具\n　　如今已经出现了若干个基于分布式的社交网络。比如小有名气的 Twister（相当于“分布式的 Twitter”）。\n　　电子货币\n　　如今的电子货币（包括比特币），只要是有点名气的，都是基于“分布式技术”。\n　　当年中本聪发明比特币的时候，提到了他/她的动机之一就是——防止政府滥发货币导致货币贬值。“滥发货币”实际上是在变相掠夺货币持有者的财富。\n　　而比特币采用了分布式技术——它【无需】一个中央的核心（央行）来发行货币。这就避免了“人为滥发货币”的问题。\n　　（当然，目前所有的“电子货币”都还不够成熟，还远远无法替代传统货币；但是将来说不定可以做到。即使将来无法彻底替代传统货币，至少也可以做到“共存”）\n\n◇“分布式”的意义\n\n　　由于很多“翻墙术”都需要借助于“分布式”，所以“翻墙术”的意义也就成了“分布式”的意义；同理，“匿名术”的意义也成了“分布式”的意义。\n　　除了兼具“翻墙术和匿名术”的意义，“分布式”还具有如下的意义：\n　　刚才提到“分布式”可以用于“文件共享、社交网络、聊天工具”，这里面的意义在于——网民可以实现“无法审查、无法删除”的信息共享和交流。而且这种分布式的平台，由于没有中心服务器，很难摧毁（除非其设计存在显著缺陷）。通常而言，参与的节点数越多，摧毁该平台的难度越大。\n　　分布式的电子货币，主要意义在于——捍卫你的私有财产权——政府【无法】掠夺你手中的电子货币（其中的道理，刚才提到了）。其它的意义还包括：政治【无法】控制电子货币的流动（相比之下：传统的“汇款/转账”受到政府控制，而“现钞”的形式又不适合“较大的货币量”）。\n　　最后，再提一下“分布式”在健壮性方面的好处。分布式的系统，由于不存在中心/核心的节点，大大减少了中心节点导致的“单点故障”（关于这个话题，请参见《聊聊“单点故障”——关于“德国空难”和“李光耀”的随想》）\n\n◇你可以做些啥？\n\n　　1. 如果你不是 IT 技术人员，至少也可以多了解一下：“分布式”有啥用处，有啥好处；\n　　2. 如果你本身就是搞 IT 技术的，并且对分布式有所掌握，或许可以写点文章普及推广；\n　　3. 如果你是个程序员，并且对分布式有所掌握，或许可以去参与分布式相关的开源软件项目。\n\n★技术力量之“密码学”\n\n　　俺对“加密技术”，同样是非常重视滴——单单 TrueCrypt 的介绍，就写了好几篇（目录在“这里”）。\n\n◇“密码学”的用途\n\n　　“密码学”的用途太多了，考虑到篇幅，俺就不一一列举了。\n\n◇“密码学”的重要意义\n\n　　实际上，前面提到的那3种技术，都需要依赖密码学。单凭这点，就可以看出密码学的意义之大。\n　　并且俺还要再补充非常重要的一点：\n　　在“工业革命”之后，“信息时代”之前，这个时期，个人在政府面前是非常非常渺小的——个人制造的任何东西，都不足以跟政府在该领域制造的东西抗衡。这么说有点抽象，俺举个例子：\n　　武器方面：\n　　个人能制造的最好的武器，顶多是猎枪；而政府可以制造“大炮、导弹”，有些政府还可以造“航母、核弹”。显然，个人与政府的产出，差了好几个数量级。\n　　不光是“武器”，其它领域（比如交通工具）也差不多。\n\n　　那么，信息时代到来之后，有些啥变化捏？其实大部分领域没有变化——个人能造的东西，跟政府能造的东西，还是差了 N 个数量级。\n　　但是有一个领域出现根本性的改变，那就是“密码学”。\n　　此话怎讲？俺来解释一下：\n　　如今，随便一个普通的网民，都可以在互联网上轻易下载到一些优秀的加密工具（比如：GnuPG、TrueCrypt ...）。任何一个普通的网民，稍微学习一下，就可以用这些工具进行数据的【高强度加密】。并且加密后的密文，政府方面即使用上超级计算机，也无法解密。\n　　补充说明一下：\n　　密码学领域中提到的“无法解密”是指——在【有意义的时间之内】无法解密。比如某个密文依靠暴力破解需要一千年，那么就等同于“无法解密”。\n　　所以，在密码学领域，咱们屁民跟政府，已经处于平起平坐的地位啦 :)\n　　前面那3种技术，之所以能用来捍卫自由，有相当程度是得益于：密码学导致的颠覆性变化。\n\n◇你可以做些啥？\n\n　　1. 由于密码学的应用很广泛，哪怕你不是搞 IT 技术的，至少也要了解一些基本概念；\n　　2. 如果你本身就是搞 IT 技术的，并且对密码学有所掌握，或许可以写点文章普及推广；\n　　3. 如果你是个程序员，并且对密码学有所掌握，或许可以去参与相关的开源软件项目。\n\n★一些补充说明\n\n　　（估计会有读者提一些问题。俺把预先能想到的问题，先列出来，并附上俺的回答）\n\n　　某些读者可能会问：为啥你没有提到“开源”？\n　　俺的回答是：“开源”是一项运动，是一种理念，但不是一种技术。本文谈的是“技术”。\n\n　　某些读者可能会问：这些技术如果被坏人用来干坏事，咋办？\n　　俺的回答是：任何技术都是一把双刃剑——既可以用来干好事儿，也可以干坏事儿。要想减少“坏人利用技术干坏事儿”，需要从其他领域入手来解决。依靠技术本身，是无法解决这一点的。\n\n　　某些读者可能会问：既然你鼓吹“分布式”，为啥你还在用 Google 的博客平台？\n　　俺的回答是：其实俺早就想迁移，但是还没有找到令俺满意的替代品 :( 俺需要综合考虑“安全性、功能、性能、易用性”等各项指标。\n\n\n俺博客上，和本文相关的帖子（需翻墙）：\n如何翻墙\n如何隐藏你的踪迹，避免跨省追捕\n如何保护隐私\nTrueCrypt 的扫盲教程和高级教程\n如何用互联网进行“反洗脑”和“政治启蒙”——分享若干个人经验\n聊聊“单点故障”——关于“德国空难”和“李光耀”的随想\n社会工程学扫盲\n扫盲逻辑谬误——以五毛言论为反面教材",
			"date_added": 1476364913
		},
		{
			"post_id": 1476365001,
			"body": "[ 扫盲 HTTPS 和 SSL/TLS 协议[3]：密钥交换（密钥协商）算法及其原理](https://program-think.blogspot.com/2016/09/https-ssl-tls-3.html)\n　　先插播一个好消息：\n　　本月初俺发了一篇《老流氓CNNIC 的接班人——聊聊“沃通/WoSign”的那些破事儿》。前2天看到新闻说，Mozilla 组织（Firefox）已经把沃通的根证书加入黑名单了，为期一年。一年之后看它的表现再决定是否永久性屏蔽。\n　　对这种流氓公司，就应该给它点颜色看看（老实说，俺还觉得处罚偏轻了）\n\n　　本系列的前一篇，咱们聊了“密钥交换的难点”以及“证书体系”的必要性。今天这篇来介绍一下实战中使用的“密钥协商算法”。\n\n★密钥交换/协商机制要达到啥目的？\n\n　　前一篇介绍了 SSL/TLS 的身份认证机制。这个机制是为了防止攻击者通过【篡改】网络传输数据，来假冒身份，以达到“中间人攻击/MITM”的目的。\n　　而今天要聊的“密钥协商机制”是：（在身份认证的前提下）如何规避【偷窥】的风险。\n　　通俗地说，即使有攻击者在偷窥你与服务器的网络传输，客户端（client）依然可以利用“密钥协商机制”与服务器端（server）协商出一个用来加密应用层数据的密钥（也称“会话密钥”）。\n\n\n★密钥交换/协商机制的几种类型\n\n　　俺总结了一下，大致有如下几种类型：\n\n◇依靠非对称加密算法\n\n　　原理：\n　　拿到公钥的一方先生成随机的会话密钥，然后利用公钥加密它；再把加密结果发给对方，对方用私钥解密；于是双方都得到了会话密钥。\n\n　　举例：\n　　RSA\n\n◇依靠专门的密钥交换算法\n\n　　原理：\n　　这个原理比较复杂，一两句话说不清楚，待会儿聊到 DH 的那个章节会详谈。\n\n　　举例：\n　　DH 算法及其变种\n\n◇依靠通讯双方事先已经共享的“秘密”\n\n　　原理：\n　　既然双方已经有共享的秘密（这个“秘密”可能已经是一个密钥，也可能只是某个密码/password），只需要根据某种生成算法，就可以让双方产生相同的密钥（并且密钥长度可以任意指定）\n\n　　举例：\n　　PSK 和 SRP（可能很多同学没听过这俩玩意儿。别担心，本文后续部分有介绍）\n\n\n★基于 RSA 的密钥协商\n\n◇概述\n\n　　这大概是 SSL 最古老的密钥协商方式——早期的 SSLv2 只支持一种密钥协商机制，就是它。（前一篇）介绍身份认证重要性的时候，也是拿 RSA 来演示。\n　　RSA 是一种【非】对称加密算法。在本系列第1篇的背景知识介绍中，已经聊过这种算法的特点——加密和解密用使用【不同的】密钥。并且“非对称加密算法”既可以用来做“加密/解密”，还可以用来做“数字签名”。\n\n◇密钥协商的步骤\n\n　　（下列步骤只阐述原理，具体的协议细节在下一篇讲）\n\n1. 客户端连上服务端\n2. 服务端发送 CA 证书给客户端\n3. 客户端验证该证书的可靠性\n4. 客户端从 CA 证书中取出公钥\n5. 客户端生成一个随机密钥 k，并用这个公钥加密得到 k'\n6. 客户端把 k' 发送给服务端\n7. 服务端收到 k' 后用自己的私钥解密得到 k\n8. 此时双方都得到了密钥 k，协商完成。\n\n◇如何防范偷窥（嗅探）\n\n　　攻击方式1\n　　攻击者虽然可以监视网络流量并拿到公钥，但是【无法】通过公钥推算出私钥（这点由 RSA 算法保证）\n\n　　攻击方式2\n　　攻击者虽然可以监视网络流量并拿到 k'，但是攻击者没有私钥，【无法解密】 k'，因此也就无法得到 k\n\n◇如何防范篡改（假冒身份）\n\n　　攻击方式1\n　　如果攻击者在第2步篡改数据，伪造了证书，那么客户端在第3步会发现（这点由证书体系保证）\n\n　　攻击方式2\n　　如果攻击者在第6步篡改数据，伪造了k'，那么服务端收到假的k'之后，解密会失败（这点由 RSA 算法保证）。服务端就知道被攻击了。\n\n\n★基于 DH 的密钥协商\n\n◇概述\n\n　　DH 算法又称“Diffie–Hellman 算法”。这是两位数学牛人的名称，他们创立了这个算法。该算法用来实现【安全的】“密钥交换”。它可以做到——“通讯双方在完全没有对方任何预先信息的条件下通过不安全信道创建起一个密钥”。这句话比较绕口，通俗地说，可以归结为两个优点：\n1. 通讯双方事先【不】需要有共享的秘密。\n2. 用该算法协商密码，即使协商过程中被别人全程偷窥（比如“网络嗅探”），偷窥者也【无法】知道协商得出的密钥是啥。\n\n　　但是 DH 算法本身也有缺点——它不支持认证。也就是说：它虽然可以对抗“偷窥”，却无法对抗“篡改”，自然也就无法对抗“中间人攻击/MITM”（在本系列的前一篇，俺已经强调过了——缺乏身份认证，【必定会】遭到“中间人攻击/MITM”）。\n　　为了避免遭遇 MITM 攻击，DH 需要与其它签名算法（比如 RSA、DSA、ECDSA）配合——靠签名算法帮忙来进行身份认证。当 DH 与 RSA 配合使用，称之为“DH-RSA”，与 DSA 配合则称为“DH-DSA”，以此类推\n　　反之，如果 DH 【没有】配合某种签名算法，则称为“DH-ANON”（ANON 是洋文“匿名”的简写）。此时会遭遇“中间人攻击/MITM”。（具体的中间人攻击手法，可以参见本系列前一篇）\n\n　　关于该算法的更多介绍，可以参见维基百科（这个条目）。\n\n◇数学原理\n\n　　（如果你属于那种“看了数学公式就犯晕的人”，可以直接略过本小节，不影响你看后续的章节）\n\n　　从概念上讲：DH 依赖的是：求解“离散对数问题”的复杂性。具体的算法如下：\n　　通讯双方（张三、李四）需要先约定好算法参数（algorithm parameters）：一个素数 p 作为模数，一个素数 g 作为基数（g 也称为“生成元”）。这两个算法参数是可以对外公开滴。\n　　对于张三而言，需要先想好一个秘密的自然数 a 作为私钥（不能公开），然后计算 A = ga mod p 作为自己的公钥（可以公开）。\n　　对李四而言也类似，先想好一个秘密的自然数 b 作为私钥（不能公开），然后计算 B = gb mod p 作为自己的公钥（可以公开）。\n　　张三和李四互相交换各自的公钥。\n　　然后张三计算出 k = Ba mod p，李四计算出 k = Ab mod p\n\n　　该算法至少确保了如下几点：\n1. 张三和李四分别计算出来的 k 必定是一致的\n2. 张三和李四都无法根据已知的数来推算出对方的私钥（张三无法推算出 b，李四无法推算出 a）\n3. 对于一个旁观者（偷窥者），虽然能看到 p，g，A，B，但是无法推算出 a 和 b（就是说，旁观者无法推算出双方的私钥），自然也无法推算出 k\n\n　　举例\n　　前面说得都是符号，比较抽象。下面拿具体数字举例：\n假设约定的算法参数：模数是 97，基数是 3\n张三用的私钥是 6，李四用的私钥是 21，用 python 代码演示如下（python 语言用两个连续星号表示“幂运算”，用百分号表示“取模运算”）：\n\n    p = 97\n    g = 3\n\n    a = 6\n    b = 21\n\n    A = (g**a) % p\n    B = (g**b) % p\n\n    print((B**a) % p) # 47\n    print((A**b) % p) # 47\n\n　　最后打印出来的两个 47 就是双方都计算出了【相同的】结果（这个数值可以用作之后的“会话密钥”）\n\n　　上面因为是举例，用的数字都比较小。在实战中需要注意如下几点，以降低被攻击的风险。\n1. p 必须是质数且足够大（至少300位）\n2. a，b 也要足够大（至少100位），且必须是随机生成。\n3. g 必须是质数，【不】需要很大，比如 2 或 3 或 5 都可以。g 如果太大并【不能】显著提升安全性，反而会影响性能。\n\n◇密钥协商的步骤\n\n　　（下列步骤只阐述原理，具体的协议细节在下一篇讲）\n\n1. 客户端先连上服务端\n2. 服务端生成一个随机数 s 作为自己的私钥，然后根据算法参数计算出公钥 S（算法参数通常是固定的）\n3. 服务端使用某种签名算法把“算法参数（模数p，基数g）和服务端公钥S”作为一个整体进行签名\n4. 服务端把“算法参数（模数p，基数g）、服务端公钥S、签名”发送给客户端\n5. 客户端收到后验证签名是否有效\n6. 客户端生成一个随机数 c 作为自己的私钥，然后根据算法参数计算出公钥 C\n7. 客户端把 C 发送给服务端\n8. 客户端和服务端（根据上述 DH 算法）各自计算出 k 作为会话密钥\n\n◇如何防范偷窥（嗅探）\n\n　　嗅探者可以通过监视网络传输，得到算法参数（模数p，基数g）以及双方的公钥，但是【无法】推算出双方的私钥，也【无法】推算出会话密钥（这是由 DH 算法在数学上保证的）\n\n◇如何防范篡改（假冒身份）\n\n　　攻击方式1\n　　攻击者可以第4步篡改数据（修改算法参数或服务端公钥）。但因为这些信息已经进行过数字签名。篡改之后会被客户端发现。\n\n　　攻击方式2\n　　攻击者可以在第7步篡改客户端公钥。这步没有签名，服务端收到数据后不会发现被篡改。但是，攻击者篡改之后会导致“服务端与客户端生成的会话密钥【不一致】”。在后续的通讯步骤中会发现这点，并导致通讯终止。\n　　（下一篇讲具体协议的时候会提到：协议初始化/握手阶段的末尾，双方都会向对方发送一段“验证性的密文”，这段密文用各自的会话密钥进行【对称】加密，如果双方的会话密钥不一致，这一步就会失败，进而导致握手失败，连接终止）\n\n\n★DH 的变种\n\n◇基于“椭圆曲线”的 ECDH\n\n　　DH 算法有一个变种，称之为 ECDH（全称是“Elliptic Curve Diffie-Hellman”）。维基条目在“这里”\n　　它与 DH 类似，差别在于：\nDH 依赖的是——求解“离散对数问题”的困难。\nECDH 依赖的是——求解“椭圆曲线离散对数问题”的困难。\n\n　　ECDH 的数学原理比 DH 更复杂。考虑到本文读者大都【不是】数学系出身，俺就不展开了。\n　　ECDH 跟 DH 一样，也是【无认证】的。同样需要跟其它签名算法（比如 RSA、DSA、ECDSA）配合。\n\n◇对 DH 和 ECDH 进行“临时密钥”的改良——DHE 和 ECDHE\n\n　　刚才介绍的 DH 和 ECDH，其密钥是持久的（静态的）。也就是说，通讯双方生成各自的密钥之后，就长时间用下去。这么干当然比较省事儿（节约性能），但是存在某种安全隐患——无法做到“前向保密”（洋文是“forward secrecy”）。\n　　为了做到“前向保密”，采用“临时密钥”（洋文是“ephemeral key”）的方式对 DH 和 ECDH 进行改良。于是得到两种新的算法——DHE 和 ECDHE。（这两种新算法的名称，就是在原有名称后面加上字母 E 表示 ephemeral）。其实算法还是一样的，只是对每个会话都要重新协商一次密钥，且密钥用完就丢弃。\n　　（估计很多同学不太了解“前向保密”这个概念。俺会在本系列中单独开一帖，介绍“前向保密”的概念及其好处）\n\n\n★基于 PSK 的密钥协商\n\n◇概述\n\n　　PSK 是洋文“Pre-Shared Key”的缩写。顾名思义，就是【预先】让通讯双方共享一些密钥（通常是【对称加密】的密钥）。所谓的【预先】，就是说，这些密钥在 TLS 连接尚未建立之前，就已经部署在通讯双方的系统内了。\n　　这种算法用的不多，它的好处是：\n1. 不需要依赖公钥体系，不需要部属 CA 证书。\n2. 不需要涉及非对称加密，TLS 协议握手（初始化）时的性能好于前述的 RSA 和 DH。\n　　更多介绍可以参见维基百科，链接在“这里”。\n\n◇密钥协商的步骤\n\n（由于 PSK 用的不多，下面只简单介绍一下步骤，让大伙儿明白其原理）\n\n　　在通讯【之前】，通讯双方已经预先部署了若干个共享的密钥。\n　　为了标识多个密钥，给每一个密钥定义一个唯一的 ID\n　　协商的过程很简单：客户端把自己选好的密钥的 ID 告诉服务端。\n　　如果服务端在自己的密钥池子中找到这个 ID，就用对应的密钥与客户端通讯；否则就报错并中断连接。\n\n◇如何防范偷窥（嗅探）\n\n　　使用这种算法，在协商密钥的过程中交换的是密钥的标识（ID）而【不是】密钥本身。\n　　就算攻击者监视了全过程，也无法知晓密钥啥。\n\n◇如何防范篡改（假冒身份）\n\n　　PSK 可以单独使用，也可以搭配签名算法一起使用。\n　　对于单独使用\n　　如果攻击者篡改了协商过程中传送的密钥 ID，要么服务端发现 ID 无效（协商失败），要么服务端得到的 ID 与客户端不一致，在后续的通讯步骤中也会发现，并导致通讯终止。\n　　（下一篇讲具体协议的时候会提到：协议初始化/握手阶段的末尾，双方都会向对方发送一段“验证性的密文”，这段密文用各自的会话密钥进行【对称】加密，如果双方的会话密钥不一致，这一步就会失败，进而导致握手失败，连接终止）\n\n　　对于搭配签名算法\n　　如果攻击者篡改了协商过程中传送的密钥 ID，验证签名会失败\n\n◇补充说明\n\n　　PSK 与 RSA 具有某种相似性——既可以用来搞“密钥协商”，也可以用来搞“身份认证”。\n　　所以，PSK 可以跟 DH（及其变种）进行组合。例如：DHE-PSK、ECDHE-PSK\n　　关于 PSK 的更多细节，可以参见 RFC4279\n\n\n★基于 SRP 的密钥协商\n\n◇概述\n\n　　SRP 是洋文“Secure Remote Password”的缩写。这个算法有点类似于刚才提到的 PSK——只不过 client/server 双方共享的是比较人性化的密码（password）而不是密钥（key）。该算法采用了一些机制（盐/salt、随机数）来防范“嗅探/sniffer”或“字典猜解攻击”或“重放攻击”。\n　　这个算法应该用得很少——OpenSSL 直到2012年才开始支持该算法。所以俺这里就不展开了。有兴趣的同学可以去看 RFC2945 的协议描述。\n\n◇密钥协商的步骤\n\n　　（由于 SRP 用的不多，俺偷懒一下，略去此小节）\n\n\n★各种组合的一览表\n\n算法组合\t密钥交换\t身份认证\t是否会遭遇\n中间人攻击\t是否具备\n前向保密\tSSL 2.0\tSSL 3.0\tTLS 1.0\tTLS 1.1\tTLS 1.2\tTLS 1.3\n（草案）\nRSA\tRSA\tRSA \t否\t否 \t是\t是\t是\t是\t是\t否\nDH-RSA\tDH\tRSA \t否\t否 \t否\t是\t是\t是\t是\t否\nDH-DSA\tDH\tDSA \t否\t否 \t否\t是\t是\t是\t是\t否\nDHE-RSA\tDHE\tRSA \t否\t是 \t否\t是\t是\t是\t是\t是\nDHE-DSA\tDHE\tDSA \t否\t是 \t否\t是\t是\t是\t是\t是\nECDH-RSA\tECDH\tRSA \t否\t否 \t否\t否\t是\t是\t是\t否\nECDH-ECDSA\tECDH\tECDSA \t否\t否 \t否\t否\t是\t是\t是\t否\nECDHE-RSA\tDHE\tRSA \t否\t是 \t否\t否\t是\t是\t是\t是\nECDHE-ECDSA\tDHE\tECDSA \t否\t是 \t否\t否\t是\t是\t是\t是\nPSK\tPSK\tPSK \t否\t否 \t否\t否\t是\t是\t是\t？\nPSK-RSA\tPSK\tRSA \t否\t否 \t否\t否\t是\t是\t是\t？\nDHE-PSK\tDHE\tPSK \t否\t是 \t否\t否\t是\t是\t是\t？\nECDHE-PSK\tDHE\tPSK \t否\t是 \t否\t否\t是\t是\t是\t？\nSRP\tSRP\tSRP \t否\t否 \t否\t否\t是\t是\t是\t？\nSRP-RSA\tSRP\tRSA \t否\t否 \t否\t否\t是\t是\t是\t？\nSRP-DSA\tSRP\tDSA \t否\t否 \t否\t否\t是\t是\t是\t？\nDH-ANON\tDH\t无 \t是\t否 \t否\t是\t是\t是\t是\t否\nECDH-ANON\tECDH\t无 \t是\t否 \t否\t否\t是\t是\t是\t否\n\n　　（截至本文发布时，TLS 1.3 还处于“草案”阶段，尚未正式发布。等到它正式发布，俺会把上述表格的最后一列再补充一下）\n",
			"date_added": 1476364992
		},
		{
			"post_id": 1476365185,
			"body": "[编程随想](https://program-think.blogspot.com/)",
			"date_added": 1476365175
		}
	],
	"post_like": {},
	"comment": [
		{
			"comment_id": 1,
			"body": "@Flyman: ?",
			"post_uri": "19AAsU7HXRC1bmCAM8DeAcNjEvwSaKrB7u_1476355269",
			"date_added": 1476355355
		},
		{
			"comment_id": 2,
			"body": "@Flyman: http://127.0.0.1:43110/15gfg6DUVkp7ApLSMQvC2ig5qy8j91jXeW/",
			"post_uri": "19AAsU7HXRC1bmCAM8DeAcNjEvwSaKrB7u_1476355269",
			"date_added": 1476364441
		},
		{
			"comment_id": 3,
			"body": "@Nekocross: 复制粘贴一下随想君的好文。",
			"post_uri": "19AAsU7HXRC1bmCAM8DeAcNjEvwSaKrB7u_1476364618",
			"date_added": 1476365114
		}
	],
	"follow": []
}