{
	"next_topic_id": 8,
	"topic": [
		{
			"topic_id": 1,
			"title": "用谷歌搜索  邀请码 inurl:/code.php",
			"body": "如题  看看会发生什么",
			"added": 1505816587,
			"parent_topic_uri": "10_1NV87VmSkezRyz8NbFpdkYJsJUSfXx7LJa"
		},
		{
			"topic_id": 2,
			"title": "用xxnet安卓版在手机上看youtube的方法",
			"body": "xxnet安卓版无法自动升级 需要手动解压到 手机内存空间的根目录\n确保文件夹名是 XX-Net  例如文件夹名如果是 XX-Net-3.4.2 请把它重命名为 XX-Net\n以后每次升级都这样做 但是先把旧的XX-Net文件夹内的data文件夹复制出来 然后把旧的XX-Net删除\n手动解压XX-Net到 手机内存空间的根目录 再将 data文件夹 复制进去\n\n首次安装xxnet 启动运行一次 大概半个小时左右 等有效ip数量超过20个以上 关掉xxnet\n复制 XX-Net/code/default/gae_proxy/local/proxy.ini 粘贴到 XX-Net/data/gae_proxy/\n然后把 XX-Net/data/gae_proxy/proxy.ini  重命名为：manual.ini 然后用 文本编辑器打开\n把其中的 两处 127.0.0.1 改成 0.0.0.0    然后启动 xxnet\n\n手机上安装 postern 如果手机系统版本较低 比如我的系统是 android 4.3  版本  请安装postern 1.2.0版本\n安卓5 以上因该可以安装 postern 3.1.2版本 3.1.2版本更完整好用\n打开postern 把服务器地址从 127.0.0.1 改成 0.0.0.0 服务器端口( server port) 从8080 改成 8087\n代理类型 ( server type ) 选择 HTTPS/HTTP CONNECT  用户名(username)和 密码(password)都清空\n记得点 保存 ( OK )   \n\n最后一步是导入证书\n先要把证书复制到SD卡根目录 做法如下：\n复制 XX-Net/data/gae_proxy/CA.crt  粘贴到 手机内存空间的根目录\n然后 安装证书 做法如下：\n手机上找到 设置 -> 安全(安全和锁屏)   点一下  从SD卡安装  然后确定         可能需要设置锁屏\n\n确保postern已经启动 并且 手机屏幕上方有 一把钥匙 的图标\n确保 手机上的 xxnet 已经启动\n打开手机上的浏览器 最好是chrome 56版本 或更高版本\n地址栏 输入 https://m.youtube.com 如果一切正常可以看视频 说明你成功了！",
			"added": 1505933364,
			"parent_topic_uri": "10_1NV87VmSkezRyz8NbFpdkYJsJUSfXx7LJa"
		},
		{
			"topic_id": 3,
			"title": "我对ShadowsocksR的一点疑问",
			"body": "如果某个IP地址不提供网页服务 却有大量的http和https请求发送到那个IP 是否会更引人注意呢\n伪装有两种 一种是让自己变成别的东西 你需要了变得足够像 这可能很难\n另一种是让自己融入到背景噪声中去 你需要把自己的狐狸尾巴藏起来 这个比较容易 但是需要长期维护\n因为除了尾巴会暴露你以外 鼻子可能也会把你暴露 对方发现了你的特征你就更新一下 把这个特征藏起来\n个人意见  请大家指正",
			"added": 1506287022,
			"parent_topic_uri": "10_1NV87VmSkezRyz8NbFpdkYJsJUSfXx7LJa"
		},
		{
			"topic_id": 4,
			"title": "对shadowsocks的obfs有个疑问",
			"body": "shadowsocks是通过socks连接 obfs又把socks伪装成http 或 https\n为什么不直接开发一个https的代理软件呢\n客户端和服务端完成握手之后客户端把验证(auth)改成注册时的验证(auth)\n服务端如果收到注册的auth就提供代理服务\n如果收到其它的auth就像一个正常的网站一样作出反应\n如果使用python实现的话应该不会太难\n如果使用c语言的话 客户端应该可以借用curl的代码\n\n附：有一篇技术文章写得不错 我复制了过来\n因为是转载所以注明来源：https://medium.com/@Blankwonder/%E5%90%84%E7%A7%8D%E5%8A%A0%E5%AF%86%E4%BB%A3%E7%90%86%E5%8D%8F%E8%AE%AE%E7%9A%84%E7%AE%80%E5%8D%95%E5%AF%B9%E6%AF%94-1ed52bf7a803\n\n文章内容如下：\n各种加密代理协议的简单对比\n目前我们常用的加密代理有协议有 HTTPS，SOCKS5-TLS 和 shadowsocks,此文从各个角度简单分析各个协议的优劣，以帮助各位选择合适的协议。\n先简单说些背景知识，以上协议都是基于 TCP 的代理协议，代理协议（Proxy Procotol）与 VPN 不同，仅可被用于通过代理服务器转发 TCP 连接（shadowsocks 支持代理 UDP），而 VPN 可被用于 IP 层上的所有协议，如 TCP、UDP、ICMP 等。所以在使用代理时，ping 等 ICMP 应用是不可以被代理的。\n然后简单解释一下什么是 TLS，TLS 又名 SSL，是针对数据流的安全传输协议。简单来说，一个 TCP 链接，把其中原本要传输的数据，按照 TLS 协议去进行加密传输，那么即可保证其中传输的数据安全。这个安全至少体现在以下几个方面：\n数据被加密，任何可以截取到 TCP 数据流的人，无法解密出原始数据；\n数据不可被篡改，一旦篡改会导致解密失败，连接断开；\n服务器身份验证，基于 X509 的证书体系去确认目标服务器是否为真实的服务器。\n明文的 HTTP 套上一层 TLS，也就变成了 HTTPS，SOCKS5 套上 TLS，就变成了 SOCKS5-TLS。TLS 协议是整个互联网安全的基石，几乎所有需要安全传输的地方都使用了 TLS，如银行、政府等等。\n当被用作代理协议时，HTTP 层和 SOCKS5 层去进行具体的代理连接控制，如进行身份验证、告知需要转发的目标主机名等。所以不需要 TLS 他们也可以用作代理，只不过所有数据都是明文传输，不具备安全性。加上 TLS 后，由 TLS 去保证安全。而 shadowsocks 协议则融合了代理控制和安全保证。所以后文的很多对比实际上是 shadowsocks 和 TLS 的对比。\n性能\nTLS 协议由于承担了一项额外的功能，需要验证目标服务器身份，导致其握手时会比较复杂。\nping 的时间表示，一个 IP 层数据包从本地发出，到服务器再返回的来回时间，即 RTT（round-trip time）。\n在发起代理连接时，首先我们需要进行 TCP 3 次握手，耗时为 1 个 RTT。（此处把最后的 ACK 直接并入后续的数据传输部分）。\n然后进行 TLS 握手，因为服务端和客户端需要进行身份验证并协商协议版本号、加密方式等细节，第一次连接时需要 2 个 RTT。当然 TLS 的制定者也发现这太慢了，于是引入了 TLS Session Resumption，当服务端和客户端服务器连接过一次后，之后的连接可以直接复用先前的协商结果，使得 RTT 降低到 1 个 RTT。但这需要服务器和客户端的支持。（这是为什么 Surge benchmark 时，对于 TLS 代理第一次的测试结果可能较慢的原因之一）\n对于 HTTPS 协议，当 TLS 连接建立后，客户端通过 HTTP 层发起代理请求，服务端回应连接建立，此后进入正常的代理通讯环节，再耗费 1 个 RTT。\n对于 SOCKS5-TLS 协议，当 TLS 连接建立后，如果没有验证的环节，那么需要再耗费 1 个 RTT，如果有验证（用户名密码），那么需要耗费 2 个 RTT。\n而对于 shadowsocks，由于使用的是预共享密钥（pre-shared key, PSK），加密方式也是预先约定好的，所以不需要进行协商，只需要在 TCP 建立之后，再耗费一个 1 个 RTT 告知目标主机名。\n总结如下：\nHTTPS（TLS Session Resumption）：3 个 RTT\nSOCKS5-TLS 无验证：3 个 RTT\nSOCKS5-TLS 有验证：4 个 RTT\nshadowsocks：2 个 RTT\n（注：最后一个 RTT 并不严谨，因为客户端可以在最后一个 RTT 产生响应前，直接开始后续传输。另外如果使用了 TCP Fast Open，可以看作 TCP 阶段 RTT 为 0。）\n对于日常使用，最影响性能的就是握手速度，后续传输过程中的加解密性能，对于现代 CPU 来说基本都不会构成瓶颈。 shadowsocks 由于有 PSK 的特点，在 TCP 协议基础上已经达到极限，不可能有协议能再低于 2 个 RTT。\n所以，同等网络环境下，shadowsocks 是明显快于 HTTPS 的。（体现在延迟上，而不是带宽）\n另外，最新的 TLS 1.3 协议正力图解决这个问题，由于目前还处于草案阶段，各种工具链不完善，现在不太好评估实际效果。\n数据安全性\n（此处说的数据安全性，指的是加密后的流量是否会被截取并破解的问题。）\n对于 TLS，作为个人用户，丝毫不用担心，TLS 协议如果真的不安全了，世界早就乱套了…\n对于 shadowsocks，使用的加密方法也都是工业上成熟的算法，从数据安全性角度考虑也基本不用担心。\n抗识别\n这个问题有两个角度需要考虑：\n观察一段数据流量，是否能判别这是一个代理协议的流量；\n对于一个仅暴露出 TCP 端口的黑箱，能否判断这个端口提供了代理服务。\n对于 shadowsocks 协议，在第一点上，观察者只能判定这个数据流为未知的协议。而第二点，shadowsocks 的几次修改，都是因为在这出了问题，目前最新的 AEAD 加密方式，应该已经解决了这个问题，但还需要时间去检验。\n对于 HTTPS 协议，在第一点上，观察者是无法去区分这是一个代理还是一个标准的 HTTPS 网页访问的（当访问 HTTP 页面时，如果访问 HTTPS 会使得流量模型出现特征）。而第二点，在妥善配置的情况下，也是完全无法判别。\n但在实践中，大部分 HTTPS 代理服务器为了兼容浏览器行为，在直接被当做 HTTPS Web 服务器访问时，会返回代理错误页或者 407 Proxy authentication required，直接暴露了自己是一个代理，如果要抗击第二点，可以将服务端的行为修改为，如果请求的 Header 中，不包含一个有效的 Auth，那么就返回一个标准的 200 页面，这样从理论上杜绝了被嗅探的可能。\n总结一下，最新的 shadowsocks 已经能满足抗识别的两个要求，但是观察者得到结论是“未知协议”。而使用 HTTPS，观察者无法判断这是一个 HTTPS 代理还是 HTTPS Web 服务器，这是更优的结果。\nHiding true identities inside a seemingly ordinary. — Person of Interest S03E23\n部署难度\nHTTPS 协议使用广泛，有众多成熟的工业级工具，如 squid，haproxy，nghttp2 等等，但是由于 HTTPS 协议本身比较复杂，配置起来参数众多，有很多性能相关参数需要自己调优，所以一般用户配置起来会有难度。\nshadowsocks 经过多年发展，目前也已经有众多的软件支持，但是对于不同特性的支持度不一。由于参数简单，部署配置起来极其方便。\n功能\nshadowsocks 目前还存在一些功能上的缺陷：\nshadowsocks 没有设计错误回报机制，对于以下错误，客户端看到的行为都是服务器主动断开 TCP 连接：\n密钥或者加密方法错误\n目标主机名 DNS 解析失败\n目标主机不可达\n目标主机拒绝连接\n这使得客户端没办法根据不同的错误采取进一步的动作，只能简单的向用户返回 Socket closed by remote 错误。\n2. shadowsocks 没有考虑用户鉴别，使得服务端 ACL 或者流量统计等功能无法实现，主流的 workaround 是通过不同的端口号去识别不同的用户，但这极其浪费资源且很不优雅。\n3. 部分 ISP 对于非 HTTP 和 TLS 的未知流量，会进行降速限制，这个可以通过配置 obfs 解决。",
			"added": 1507488494,
			"parent_topic_uri": "10_1NV87VmSkezRyz8NbFpdkYJsJUSfXx7LJa"
		},
		{
			"topic_id": 5,
			"title": "转载两篇技术文章",
			"body": "第一篇出处：https://blessing.studio/why-do-shadowsocks-deprecate-ota/\n内容如下：（文章带图片  图片请到原网页去看）\n为何 shadowsocks 要弃用一次性验证 (OTA)\n前些天，shadowsocks 提出了 SIP004 草案，旨在使用 AEAD 算法 取代原先的不安全的 流加密 + OTA，并弃用了一次性验证 (OTA)。\n\n新协议的提出对于 shadowsocks 是一个非常非常重大的改进，因此我写了这篇博文为看不懂洋文的朋友们科普一下「为什么 OTA 会被这么快被弃用」以及「为什么应该使用新协议」。\n\n一、OTA 是什么\n\nOTA（One Time Auth，一次性验证），是之前 shadowsocks 为了增强安全性，抵抗 CCA（Chosen-ciphertext Attack，选择密文攻击）而加入的实验性功能。\n\n我觉得应该很多人都听过这玩意 —— 就算不知道 OTA 是啥好歹也在 shadowsocks 各分支的客户端上看到过「一次性验证」的开关吧？虽然这个名字确实起得有点让人不明所以就是了（笑）。\n\n那么下面我来科普下当初为什么要加入 OTA 功能。\n\n二、原协议的弱点\n\n原 shadowsocks 协议的这个漏洞其实早在 2015 年就被 @breakwa11 提出了。当时正值 @clowwindy 被喝茶之际，此 issue 下闹得沸沸扬扬撕逼不断，过了好一段时间后才开始有正经的技术讨论。\n\n如果你想要了解一下当时的情况可以去看看 这个 issue，我这里简略概括一下当时提出的漏洞。\n\n2.1 shadowsocks 协议\n\n原 shadowsocks 协议 的 TCP 握手包（加密后）的格式是这样的：\n\n+-------+----------+\n|  IV   | Payload  |\n+-------+----------+\n| Fixed | Variable |\n+-------+----------+\n其中的 IV（Initialization Vector, 初始化向量）是使用随机数生成器生成的一个固定长度的输入值。通过引入 IV 能够使相同的明文和相同的密钥产生不同的密文，让攻击者难以对同一把密钥的密文进行破解。\n\nshadowsocks 服务端会用这个 IV 和 pre-shared key（预共享密钥，通常是用户设置的密码）来解密 TCP 数据包中的 payload。\n\n解密后的内容格式如下：\n\n+--------------+---------------------+------------------+----------+\n| Address Type | Destination Address | Destination Port |   Data   |\n+--------------+---------------------+------------------+----------+\n|      1       |       Variable      |         2        | Variable |\n+--------------+---------------------+------------------+----------+\n其中 Address Type (ATYP) 是地址类型，占一个字节，有三个可能的取值：01, 03, 04，分别对应 IPv4, hostname, IPv6 类型的地址。这些都是 RFC1928 中定义的标准，有兴趣可以去看看。\n\n握手完成后 shadowsocks 中继就会工作在流模式下，后续的所有 TCP 数据包不会再带上 IV，而是使用握手时协商的那个 IV。\n\n说完了原 shadowsocks 协议的内容，下面说说该协议的不足之处。\n\n2.2 原协议的缺陷\n\n正如上表所示，原始 shadowsocks 协议 TCP 握手包中的 IV 字段是 Fixed（定长）的。不同的加密算法 IV 长度不同，对于 rc4-md5 和 aes 系列等常用算法，这个长度是 16 字节。各加密算法的详细信息可以在 官方文档 - Cipher 查看。\n\n而服务端为了判断数据是否有效，会检查数据包中表示地址信息的那个字节，看它是不是上面提到的三个可能取值。如果是，就尝试解析后面的地址和端口进行连接；如果不是，立即断开连接。\n\n正是 shadowsocks 服务器的这个行为使得主动探测成为可能。\n\n2.2.1 主动探测的原理\n\n该方法由 @breakwa11 提供\n一般来讲，「表示地址类型的那个字节」是被加密后发送的，所以第三方无法精确的修改它。但是不巧的是，shadowsocks 所有的加密方式都是 stream cipher（流加密），而这种加密方式的特点就是「明文数据流与密钥数据流一一对应」。\n\n通俗地讲，即对应修改了某个位置的密文（根据加密模式的不同，可能影响到后面其他密文块的解密，也可能影响不到，但在这里这个性质并不重要），如果预先知道了明文的模式，虽然无法解密还原出内容，但可以修改密文中的特定字节，起到修改解密后的明文的效果。\n\n根据流加密的这个特性，坏东西们就可以通过伪造 TCP 数据包来主动探测 shadowsocks 服务器了。攻击者只要暴力尝试修改加密后的数据包中 IV 之后紧接着的那个字节（如果使用的加密算法 IV 长度为 16 字节，那么就修改第 17 个字节），穷举 2^8 = 256 种可能性，如果被测试的服务器有一种到三种情况下没有立即关闭连接，就可以判断出这台机子的这个端口开放的是 shadowsocks 服务。\n\n或许这种主动探测方法正在被 GFW 大规模应用，谁知道呢？你正在使用的原版 shadowsocks 代理随时有可能被封锁。\n\n2.2.2 防范主动探测\n\n经过讨论后上述漏洞被证明是 确实存在 的，所以现在大部分的 shadowsocks 分支都已经加入了针对这种探测方法的对抗措施（e.g. shadowsocks-libev v2.5.5+），即「随机超时抵抗」而不是立即断开连接，配合自动黑名单等机制可以有效减少被探测到的风险。\n\n但是这种方法总归不是长久之计，要怎么办呢？ \n\n三、OTA 闪亮登场\n\n上述情况下主动探测能够得逞的原因是服务器没有对收到的数据包进行校验，随便哪个阿猫阿狗发来的数据包，不管有没有被恶意篡改过，原来的 shadowsocks 服务器都会做出同样的反应。\n\n这时 @madeye（现在的 shadowsocks 维护者）提出了 One Time Auth 即「一次性验证」的提案，给原 shadowsocks 协议加上了数据包验证。\n\n3.1 OTA 协议\n\n开启了 OTA 后的 shadowsocks 握手包（加密前）是这样的：\n\n+------+---------------------+------------------+-----------+\n| ATYP | Destination Address | Destination Port | HMAC-SHA1 |\n+------+---------------------+------------------+-----------+\n|  1   |       Variable      |         2        |    10     |\n+------+---------------------+------------------+-----------+\n可以看到它添加了一个 HMAC-SHA1 字段，这个字段是将除了 DATA 通过 HMAC-SHA1 算法（以 IV + PSK 作为 key）生成的。并且数据包头部的 ATYP 添加了一个标志位用于指示 OTA 是否开启（ATYP & 0x10 == 0x10）。\n\n+----------+-----------+----------+----\n| DATA.LEN | HMAC-SHA1 |   DATA   | ...\n+----------+-----------+----------+----\n|     2    |     10    | Variable | ...\n+----------+-----------+----------+----\n握手完成后，接下来的 TCP 数据包均在原始协议的包上添加了 DATA.LEN（包长度）和 HMAC-SHA1 字段。这样，服务器就可以对数据包进行完整性校验，也就可以识别出被篡改过的数据包了。\n\n3.2 OTA 的缺陷\n\nOTA 增强了安全性，可以防范 CCA，也解决了原版协议数据包容易被篡改的问题，听起来很美好，不是吗？\n\n但是，对于这个协议的实现，shadowsocks-libev 及其它大部分分支均假定第一个数据包必须包含整个带了 SHA1-MAC 的头部，否则断开连接。\n\nOK，又一个可以通过服务器行为进行主动探测的地方。不过这种主动探测也可以通过上面提到的「随机超时抵抗」来进行防范，真正可怕的在下面：\n\n该方法由 @breakwa11 提供\n还记得我们上面提到的 stream cipher（流加密）的特点吗？攻击者可是使用同样的套路修改数据包中的 DATA.LEN 字段，然后通过观察服务器的反应来判断这是否是一个 shadowsocks 服务器。\n\n举个栗子，如果攻击者恶意构造 DATA.LEN 的高位字节密文，使得解密后 DATA.LEN 的数值变得特别大（但是后面的 DATA 的大小并没有改变），shadowsocks 服务器就会继续等待那些实际上并不存在的数据传输完成直到超时。因此只要在发送恶意数据包后观察服务器是不是「不会断开连接且至少等待 1 分钟无任何数据包」即可确定该服务器是否开启了 shadowsocks 服务。\n\n没错，这样的检测方法比检测原版协议还要神不知鬼不觉，甚至不会在服务端留下任何可疑的痕迹。OTA 当初是为了给原版协议的流加密加上一个认证以增强安全性，殊不知这带来了更大的隐患，这也是为什么 shadowsocks-org 要急急忙忙弃用 OTA 的原因。\n\n四、新协议 AEAD\n\n4.1 之前协议的缺陷汇总分析\n\n原版 shadowsocks 协议最大的缺陷就是未对数据包完整性进行校验，再加上流加密的特点，导致了攻击者可以通过穷举的方式修改密文进行基于服务器行为的主动探测。\n\nOTA 协议虽然通过在数据包尾部附上 HMAC-SHA1 字段对 DATA 的完整性进行了验证，但是包首部的 DATA.LEN 用于计算偏移的指示 DATA 长度的字段并没有经过验证。这导致了攻击者可以通过构建高位的 DATA.LEN 密文进行更隐蔽的主动探测。\n\n因此，在这次新协议草案的讨论过程中参照了 shadowsocksR 协议的一个重要改进 —— 对 DATA.LEN 进行单独校验，参见：ShadowsocksR 协议插件文档。\n\n4.2 AEAD 是啥\n\n在通常的密码学应用中，Confidentiality（保密）用加密实现，消息认证用 MAC（Message Authentication Code，消息验证码）实现。这两种算法的配合方式，引发了很多安全漏洞，过去曾经有 3 种方法：\n\nEncrypt-and-MAC (E&M)\nMAC-then-Encrypt (MtE) <- 即 OTA 的做法\nEncrypt-then-MAC (EtM) <- 新协议的做法\n然而后来人们发现，E&M 和 MtE 都是有安全问题的，所以 2008 年起， 逐渐提出了「用一个算法在内部同时实现加密和认证」的 idea，称为 AEAD (Authenticated Encryption with Associated Data)。在 AEAD 这种概念里，cipher + MAC 的模式被一个 AEAD 算法替换。\n\n使用了 AEAD 算法的新协议本质上就是更完善的 stream cipher + authentication，虽然它依然使用的是流加密，但是通过更完善的数据包完整性验证机制杜绝了上面所述的可被篡改密文的可能性。\n\n注：截至本文发布时新协议都是使用的 流加密 + 认证，不过 AEAD 的设计使得它能够使用块加密，因此上面说的并不是绝对的。\n而为了实现认证加密（Authenticated Encryption），新协议必须要将 TCP 流分割成不同的 chunk 并分别验证。如对新协议的数据包定义有兴趣可以查阅 官方文档 - AEAD，本文不再深入。\n\n4.3 新协议支持的 AEAD 算法\n\n目前 shadowsocks-libev 已经支持 如下的 AEAD 算法，其他分支也正在跟进中：\n\nAES-128-GCM\nAES-192-GCM\nAES-256-GCM\nChaCha20-IETF-Poly1305\nXChaCha20-IETF-Poly1305\n这些新的加密算法本质上就是 流加密 + 验证，原先的其他单纯的流加密算法均不适用于新协议。\n\n4.4 新协议的优缺点\n\n使用了 AEAD 算法的新协议能够解决上面描述的 Original/OTA 协议的所有问题，可以有效防范 CCA 和中间人攻击，减少被主动探测的风险。我能想到的唯一的缺点大概就是性能了，但是它又能影响多少呢？Benchmark 参考在 这里。\n\nshadowsocks 原本就不是为「加速网络」而生的项目，它的初衷是「突破网络审查并提供安全的加密访问」。是继续使用很可能会被 GFW 封锁的原协议呢，还是选择使用更安全的新协议呢，相信各位看官心中自有定夺 \n\n五、写在后面\n\n写这篇文章之前我对密码学的了解也就是一点皮毛程度而已，所以这篇文章也是我边查资料边写出来的。为了不让自己误人子弟，我非常谨慎查阅了相关资料并向他人请教（衷心感谢 @breakwa11 和 @madeye 对本文的审阅和提出的建议！）\n\n但是所谓「金无足赤，人无完人」，如果文章中仍有什么错误的地方，欢迎在下方评论区批评指正。\n\n大家都不容易，谨以此文敦促 shadowsocks 用户 / 开发者们尽快使用 / 支持新协议。\n\n第二篇出处：https://zhuanlan.zhihu.com/p/28566058\n内容如下：（文章带图片  图片请到原网页去看）\n什么是AEAD加密\nAuthenticated Encryption with Associated Data (AEAD) 是一种同时具备保密性，完整性和可认证性的加密形式。\n\nAEAD 产生的原因很简单，单纯的对称加密算法，其解密步骤是无法确认密钥是否正确的。也就是说，加密后的数据可以用任何密钥执行解密运算，得到一组疑似原始数据，而不知道密钥是否是正确的，也不知道解密出来的原始数据是否正确。\n\n因此，需要在单纯的加密算法之上，加上一层验证手段，来确认解密步骤是否正确。\n\n简单地把加密算法和认证算法组合，可以实现上述目的，并由此产生了几个方案：\n\n第一种方案，EtM (Encryption then MAC)\n\n\n\n\n\n\n图片来自 https://en.wikipedia.org/wiki/Authenticated_encryption\n\n先加密，然后对密文进行 MAC 运算（一般用各种 HMAC），把二者拼接起来，发给接收方。\n\n接收方先验证 MAC，如果验证通过，则证明密钥是正确的，然后执行解密运算。\n\n第二种方案，E&M (Encryption and MAC)\n\n\n\n\n\n\n图片来自 https://en.wikipedia.org/wiki/Authenticated_encryption\n\n同时对原始数据执行加密和 MAC 运算，把二者拼接起来，发给接收方。\n\n接收方先进行解密，然后对解密结果执行 MAC 运算，比对发来的 MAC，验证正确性。\n\n第三种方案，MtE (MAC then Encryption)\n\n\n\n\n\n\n图片来自 https://en.wikipedia.org/wiki/Authenticated_encryption\n\n与 EtM 相反，先对原始数据执行 MAC 运算，与原始数据拼接后，执行加密算法，将密文发送给接收方。\n\n接受方先进行解密，然后执行 MAC 运算，验证解密结果是否正确。\n\n然而，业内逐渐意识到以上通过组合加密和认证算法来实现 AEAD 的方案都是有安全问题的。\n\n具体安全问题细节略去不表。\n\n从 2008 年起，业内开始提出，需要在一个算法在内部同时实现加密和认证\n\n基于这个思想，一些新的算法被提出，这些算法被称为真正的 AEAD 算法。\n\n常见的 AEAD 算法如下：\n\nAES-128-GCM\nAES-192-GCM\nAES-256-GCM\nChaCha20-IETF-Poly1305\nXChaCha20-IETF-Poly1305\n在具备 AES 加速的 CPU（桌面，服务器）上，建议使用 AES-XXX-GCM 系列，移动设备建议使用 ChaCha20-IETF-Poly1305 系列。\n\n在设计加密系统的时候，请务必选用 AEAD 算法，抛弃旧的 MtE，EtM，E&M 方案。",
			"added": 1507489625,
			"parent_topic_uri": "10_1NV87VmSkezRyz8NbFpdkYJsJUSfXx7LJa"
		},
		{
			"topic_id": 6,
			"title": "AEAD 算法 如何实现 “在一个算法在内部同时实现加密和认证”？",
			"body": "AEAD 算法 “在一个算法在内部同时实现加密和认证” 我的理解是\n一般的加密方法在解密时如果使用了错误的密码就会引发异常抛出\nAEAD 算法 可能是如果使用正确的密码 错误的密文 也会引发异常抛出\n不知道对不对\n\n加密算法有两个作用\n一是保证信息安全\n二是验证权限 拥有特定密码才能去做特定的事或享受特定的服务\n个人认为 AEAD 的 密文验证对加密安全性提高是有限的\n主要的作用是提升握手验证安全性\n然而握手验证最好的方法是 发送密码的hash 供对方验证",
			"added": 1507491965,
			"parent_topic_uri": "10_1NV87VmSkezRyz8NbFpdkYJsJUSfXx7LJa"
		},
		{
			"topic_id": 7,
			"title": "关于i2p和i2pd",
			"body": "i2p是用java写的软件\ni2pd是用c语言重写的i2p软件\ni2p其实不是用来做web代理的\n它的主要功能和zeronet很像 通过p2p提供网页和邮箱服务等\n要想通过i2p访问外网 需要出口代理 最常用的出口代理是false.i2p\n但是false.i2p代理外网异常缓慢 加上i2p强调安全性多次 加密 转跳 \n使得i2p访问外部网络不仅慢而且经常访问失败\n当然改进的空间还是比较大的 比如提供简单的一键搭建出口代理功能\n如果我能翻墙就利用翻墙通道搭建出口代理供别人使用\n如果是海外人士就直接搭建出口代理 帮助他人\n另外zeronet也应该像i2p一样提供出口代理功能才好\n其实就是将一个特定的zeronet节点绑定到本机的某个端口上\n通过本机的这个端口做代理就可以访问 那个zeronet节点 所能访问的任何网站\n如果你不能直接访问某些网站 但是希望做一个出口代理帮助别人访问这些网站\n搭建出口节点的时候应该有设置代理选项供选择 为你的出口代理 提供 代理\n也就是说别人通过zeronet连接到你的节点再通过你的节点的代理访问互联网\n附：windows如何通过i2pd缓慢的访问国际互联网\n（其实就是在tunnels.conf中配置false.i2p出口代理 linux系统的朋友可以仿照着做）\n1 下载页面：https://github.com/PurpleI2P/i2pd/releases\n    下载 exe文件 比如：setup_i2pd_v2.15.0.exe\n2 安装的时候把安装路径改成D盘  D:\\Program Files\\I2Pd\n3 安装完成找到 C:\\Users\\*-*你的用户名*-*\\AppData\\Roaming\\i2pd\n    如果文件夹里是空的 或 找不到这个文件夹 可能需要先启动一次i2pd\n    如果文件夹里有文件 将里面的文件和文件夹全剪切到 D:\\Program Files\\I2Pd \n4 用Notepad++打开D:\\Program Files\\I2Pd\\i2pd.conf\n    查找 datadir  在datadir那一行的最前面添加一个 # 字符\n    另起一行 输入：datadir = D:\\Program Files\\I2Pd\n5 最重要的来了 用Notepad++打开D:\\Program Files\\I2Pd\\tunnels.conf\n    光标定位到第一行的开头 按一次回车\n    然后复制如下内容到第一行：\n\n[false.i2p-14444]\ntype = client\naddress = 0.0.0.0\nport = 14444\ndestination = false.i2p\ndestinationport = 80\n\n6 启动i2pd 等待几分钟\n    打开ie浏览器 在ie浏览器窗口上方点右键 勾选 菜单栏\n    找到 工具 点击 下拉菜单里 点击 intetnet选项   连接->局域网设置\n    勾选 为LAN使用代理服务器。。。\n    地址填：127.0.0.1    端口填：14444       记得点 确定\n    现在试试谷歌能不能访问吧    可能会需要多刷新几次",
			"added": 1507519557,
			"parent_topic_uri": "10_1NV87VmSkezRyz8NbFpdkYJsJUSfXx7LJa"
		}
	],
	"topic_vote": {},
	"next_comment_id": 18,
	"comment": {
		"539_1DcMmKhgdfkR1GDA6zhWhoFRreaej4wLmW": [
			{
				"comment_id": 1,
				"body": "ZeroMail 啊\n\n想点办法 微信可以发加密消息 就是比较麻烦\n先用第三方软件加密 然后发送  对方接收后 复制到第三方加密软件解密",
				"added": 1505808926
			}
		],
		"532_1DcMmKhgdfkR1GDA6zhWhoFRreaej4wLmW": [
			{
				"comment_id": 2,
				"body": "健身哥  ？  是指  郭文贵 吧  ？",
				"added": 1505810957
			}
		],
		"469_1DcMmKhgdfkR1GDA6zhWhoFRreaej4wLmW": [
			{
				"comment_id": 3,
				"body": "健身哥  ？  是指  郭文贵 吧  ？",
				"added": 1505811059
			}
		],
		"1_1D6bK8srThdj2KpBKqkWSGy37S7Zg1kZ98": [
			{
				"comment_id": 4,
				"body": "墙外机才需要公网IP\n如果不考虑远程登录的话 两台机器都不需要公网IP\n可以利用邮箱上传IP地址 通过UDP方式   P2P 连接",
				"added": 1505813385
			}
		],
		"1_18cRWp8EGniDTB1itbx5WXenypdjStLmoh": [
			{
				"comment_id": 5,
				"body": "我的方法是先下载Android客户端 手机用shadowsocks翻墙然后打开手机上的i2p\n等一段时间 对等端就会出现\n手机需要root  用re管理器 复制/data/data/net.i2p.android/files/netDb       复制整个文件夹\n我用debian系统 粘贴到/home/你的用户名/.i2p  粘贴之前把/home/你的用户名/.i2p/netDb 删除",
				"added": 1505814280
			},
			{
				"comment_id": 8,
				"body": "i2p 看不了视频    听音频 还是够的\n有没有好的音频网站  推荐呀？",
				"added": 1505816886
			}
		],
		"1_1GS2NZ9yvzpZkbFxRjpYmGzq9Vax2LVEz1": [
			{
				"comment_id": 6,
				"body": "和别人交换帐号吧\n交换过后 让对方辅助你 开两步验证 \n开两步验证 需要验证手机\n让他把手机验证码发给你",
				"added": 1505815472
			}
		],
		"1_19xyLs9tyTZF9JaEcWBk5JtgWdYtQPQwt3": [
			{
				"comment_id": 7,
				"body": "用谷歌搜索：   邀请码 inurl:/code.php",
				"added": 1505816638
			}
		],
		"1_16nddfMjTUY7rXzuhYXaop1T78gLYT94YR": [
			{
				"comment_id": 9,
				"body": "据我所知 obfs 是Tor最早用起来的 怎么是 SSR的idea 呢？\n如果某个IP地址不提供网页服务 却有大量的http和https请求发送到那个IP  是否会更引人注意呢\n伪装有两种 一种是让自己变成别的东西 你需要了变得足够像 这可能很难\n另一种是让自己融入到背景噪声中去 你需要把自己的狐狸尾巴藏起来 这个比较容易 但是需要长期维护\n因为除了尾巴会暴露你以外 鼻子可能也会把你暴露 对方发现了你的特征你就更新一下 把这个特征藏起来",
				"added": 1506286811
			}
		],
		"5_19xyLs9tyTZF9JaEcWBk5JtgWdYtQPQwt3": [
			{
				"comment_id": 10,
				"body": "“在一个算法在内部同时实现加密和认证”      我的理解是\n一般的加密方法在解密时如果使用了错误的密码就会引发异常抛出\nAEAD 算法 可能是如果使用正确的密码 错误的密文 也会引发异常抛出\n不知道对不对\n\n加密算法有两个作用\n一是保证信息安全\n二是验证权限 拥有特定密码才能去做特定的事或享受特定的服务\n个人认为 AEAD 的 密文验证对加密安全性提高是有限的\n主要的作用是提升握手验证安全性\n然而握手验证最好的方法是 发送密码的hash 供对方验证\n\n\n还有一个问题是MtE方案对于分组加密算法是如何实现呢\n每一组8个字节都要取MAC肯定是不现实的",
				"added": 1507491652
			}
		],
		"7_19xyLs9tyTZF9JaEcWBk5JtgWdYtQPQwt3": [
			{
				"comment_id": 11,
				"body": "C:\\Users\\*-你的用户名-*\\AppData\\Roaming\\i2pd",
				"added": 1507522270
			},
			{
				"comment_id": 12,
				"body": "C:\\Users\\你的用户名\\AppData\\Roaming\\i2pd",
				"added": 1507522307
			},
			{
				"comment_id": 13,
				"body": "反斜杠加星号 是什么转义  \"\\\\*\"",
				"added": 1507522565
			},
			{
				"comment_id": 14,
				"body": "测试一下\nC:\\Users\\\\*-*你的用户名*-*\\AppData\\Roaming\\i2pd",
				"added": 1507522742
			},
			{
				"comment_id": 15,
				"body": "再测试一下\nC:\\Users\\\\*-\\*你的用户名\\*-\\*\\AppData\\Roaming\\i2pd",
				"added": 1507522840
			},
			{
				"comment_id": 16,
				"body": "再测试一下\nC:\\Users\\\\\\*-\\*你的用户名\\*-\\*\\AppData\\Roaming\\i2pd",
				"added": 1507522904
			},
			{
				"comment_id": 17,
				"body": "这个才是原来的样子嘛！    \nC:\\Users\\\\\\*-\\*你的用户名\\*-\\*\\AppData\\Roaming\\i2pd",
				"added": 1507522985
			}
		]
	},
	"comment_vote": {}
}